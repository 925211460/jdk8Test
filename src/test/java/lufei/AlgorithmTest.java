package lufei;

import org.junit.Assert;
import org.junit.Test;

public class AlgorithmTest {

    /**
     * 冒泡排序，
     * 原理：比较两个相邻的元素，将值大的元素交换至右端。

     思路：依次比较相邻的两个数，将小数放在前面，大数放在后面。即在第一趟：首先比较第1个和第2个数，将小数放前，大数放后。然后比较第2个数和第3个数，将小数放前，大数放后，如此继续，直至比较最后两个数，将小数放前，大数放后。重复第一趟步骤，直至全部排序完成。

     举例说明：要排序数组：int[] arr={6,3,8,2,9,1};

     第一趟排序：

     　　　　第一次排序：6和3比较，6大于3，交换位置：  3  6  8  2  9  1

     　　　　第二次排序：6和8比较，6小于8，不交换位置：3  6  8  2  9  1

     　　　　第三次排序：8和2比较，8大于2，交换位置：  3  6  2  8  9  1

     　　　　第四次排序：8和9比较，8小于9，不交换位置：3  6  2  8  9  1

     　　　　第五次排序：9和1比较：9大于1，交换位置：  3  6  2  8  1  9

     　　　　第一趟总共进行了5次比较， 排序结果：      3  6  2  8  1  9

     ---------------------------------------------------------------------

     第二趟排序：

     　　　　第一次排序：3和6比较，3小于6，不交换位置：3  6  2  8  1  9

     　　　　第二次排序：6和2比较，6大于2，交换位置：  3  2  6  8  1  9

     　　　　第三次排序：6和8比较，6大于8，不交换位置：3  2  6  8  1  9

     　　　　第四次排序：8和1比较，8大于1，交换位置：  3  2  6  1  8  9

     　　　　第二趟总共进行了4次比较， 排序结果：      3  2  6  1  8  9

     ---------------------------------------------------------------------

     第三趟排序：

     　　　　第一次排序：3和2比较，3大于2，交换位置：  2  3  6  1  8  9

     　　　　第二次排序：3和6比较，3小于6，不交换位置：2  3  6  1  8  9

     　　　　第三次排序：6和1比较，6大于1，交换位置：  2  3  1  6  8  9

     　　　　第二趟总共进行了3次比较， 排序结果：         2  3  1  6  8  9

     ---------------------------------------------------------------------

     第四趟排序：

     　　　　第一次排序：2和3比较，2小于3，不交换位置：2  3  1  6  8  9

     　　　　第二次排序：3和1比较，3大于1，交换位置：  2  1  3  6  8  9

     　　　　第二趟总共进行了2次比较， 排序结果：        2  1  3  6  8  9

     ---------------------------------------------------------------------

     第五趟排序：

     　　　　第一次排序：2和1比较，2大于1，交换位置：  1  2  3  6  8  9

     　　　　第二趟总共进行了1次比较， 排序结果：  1  2  3  6  8  9

     ---------------------------------------------------------------------

     最终结果：1  2  3  6  8  9

     ---------------------------------------------------------------------

     由此可见：N个数字要排序完成，总共进行N-1趟排序，每i趟的排序次数为(N-i)次，所以可以用双重循环语句，外层控制循环多少趟，内层控制每一趟的循环次数，即
     */
    @Test
    public void test1(){
        int[] arr = {5,4,3,2,1};
        System.out.println("排序之前");
        for(int i : arr){
            System.out.println(i);
        }

        for(int i = 1 ; i < arr.length ; i++){
            for(int j = 0 ; j < arr.length -i ; j++){
                if(arr[j] > arr[j+1]){
                    int tmp = arr[j+1];
                    arr[j+1] = arr[j];
                    arr[j] = tmp;
                }
            }
        }

        System.out.println("排序之后");
        for(int i : arr){
            System.out.println(i);
        }
    }


    /**
     * 二分查找又称折半查找，它是一种效率较高的查找方法。
     　　【二分查找要求】：1.必须采用顺序存储结构 2.必须按关键字大小有序排列。
     * @author Administrator
     *
     */
    @Test
    public void test2(){
        int target = 1;
        int arr[] = {5,4,3,2,1};

        int low = 0,high = arr.length - 1;

        while (low <= high){
            int middle = (low + high)/2;
            if(arr[middle] == target){
                Assert.assertEquals(target,arr[middle]);
                System.out.println("找到了"+arr[middle]);
                return;
            }else if(arr[middle] > target){
                high = --middle;
            }else {
                low = ++middle;
            }
        }
        System.out.println("没有找到");
    }

    @Test
    public void  test3(){
        int i = 1,j = 1;
        System.out.println(i++);
        System.out.println(i);

        System.out.println(++j);
        System.out.println(j);
    }
}
